<Window x:Class="KdxDesigner.Views.ProcessFlowDetailWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:KdxDesigner.Views"
        mc:Ignorable="d"
        Title="{Binding WindowTitle}" Height="900" Width="1400" WindowState="Maximized">
    
    <Window.Icon>
        <DrawingImage>
            <DrawingImage.Drawing>
                <DrawingGroup>
                    <!-- Background -->
                    <GeometryDrawing Brush="#1E3A8A">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="0,0,32,32" RadiusX="4" RadiusY="4"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <!-- Ladder Rails (vertical lines) -->
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="8,10,2,14"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="22,10,2,14"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <!-- Ladder Rungs (horizontal lines) -->
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="10,12,12,2"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="10,16,12,2"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="10,20,12,2"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <!-- Contact symbol (representing ladder logic element) -->
                    <GeometryDrawing Brush="#FCD34D">
                        <GeometryDrawing.Geometry>
                            <EllipseGeometry Center="16,16" RadiusX="3" RadiusY="3"/>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingGroup>
            </DrawingImage.Drawing>
        </DrawingImage>
    </Window.Icon>
    
    <Window.InputBindings>
        <KeyBinding Key="Delete" Command="{Binding DeleteSelectedConnectionCommand}"/>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveChangesCommand}"/>
        <KeyBinding Key="Escape" Command="{Binding CloseCommand}"/>
    </Window.InputBindings>
    
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <local:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
        <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <local:CategoryToColorConverter x:Key="CategoryToColorConverter"/>
        <local:SubtractConverter x:Key="SubtractConverter"/>
    </Window.Resources>
    
    <DockPanel>
        <!-- メニューバー -->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="ファイル(_F)">
                <MenuItem Header="保存" Command="{Binding SaveChangesCommand}" InputGestureText="Ctrl+S"/>
                <Separator/>
                <MenuItem Header="閉じる" Command="{Binding CloseCommand}" InputGestureText="Esc"/>
            </MenuItem>
            <MenuItem Header="編集(_E)">
                <MenuItem Header="新規ノード追加" Command="{Binding AddNewNodeCommand}"/>
                <MenuItem Header="選択ノード削除" Command="{Binding DeleteSelectedNodeCommand}" 
                          IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"/>
                <Separator/>
                <MenuItem Header="Operation編集" Command="{Binding EditOperationCommand}" 
                          IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"/>
            </MenuItem>
            <MenuItem Header="表示(_V)">
                <MenuItem Header="フィルター">
                    <MenuItem Header="選択工程の関連のみ表示" Command="{Binding FilterBySelectedNodeCommand}" 
                              IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"/>
                    <MenuItem Header="前後のみ表示" Command="{Binding FilterByDirectNeighborsCommand}" 
                              IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"/>
                    <MenuItem Header="すべて表示" Command="{Binding ResetFilterCommand}" 
                              IsEnabled="{Binding IsFiltered}"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="表示オプション">
                    <MenuItem Header="IDを表示" IsCheckable="True" IsChecked="{Binding ShowNodeId}"/>
                    <MenuItem Header="ブロック番号を表示" IsCheckable="True" IsChecked="{Binding ShowBlockNumber}"/>
                    <Separator/>
                    <MenuItem Header="開始センサー有りを強調表示" IsCheckable="True" IsChecked="{Binding HighlightStartSensor}"/>
                    <MenuItem Header="タイマー未設定を強調表示" IsCheckable="True" IsChecked="{Binding HighlightStartSensorWithoutTimer}"/>
                    <Separator/>
                    <MenuItem Header="全接続線を表示（他サイクル含む）" IsCheckable="True" IsChecked="{Binding ShowAllConnections}"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="ヘルプ(_H)">
                <MenuItem Header="操作方法">
                    <MenuItem Header="Ctrl+クリック: 通常接続" IsEnabled="False"/>
                    <MenuItem Header="Ctrl+Shift+クリック: 終了条件接続" IsEnabled="False"/>
                    <Separator/>
                    <MenuItem Header="終了条件接続は期間工程と工程OFF確認(CategoryId=13)で使用可能" IsEnabled="False"/>
                </MenuItem>
            </MenuItem>
        </Menu>
        
        <!-- ツールバーコンテナ -->
        <StackPanel DockPanel.Dock="Top">
            <!-- ツールバー1行目: 基本操作とフィルター -->
            <ToolBar>
                <Label Content="サイクル:" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding CycleName}" 
                          VerticalAlignment="Center" 
                          FontWeight="Bold" 
                          Margin="5,0,10,0"/>
                <Separator/>
                <Button Command="{Binding SaveChangesCommand}" 
                        ToolTip="変更を保存 (Ctrl+S)" 
                        Content="保存" Padding="10,2"/>
                <Separator/>
                <Button Command="{Binding AddNewNodeCommand}" 
                        ToolTip="新規ノードを追加" 
                        Content="新規ノード" Padding="10,2"/>
                <Button Command="{Binding DeleteSelectedNodeCommand}" 
                        IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"
                        ToolTip="選択したノードを削除" 
                        Content="削除" Padding="10,2"/>
                <Button Command="{Binding EditOperationCommand}" 
                        IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"
                        ToolTip="Operationを編集" 
                        Content="Operation編集" Padding="10,2"/>
                <Separator/>
                <Button Command="{Binding FilterBySelectedNodeCommand}" 
                        IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"
                        ToolTip="選択した工程の関連のみ表示" 
                        Content="関連表示" Padding="10,2"/>
                <Button Command="{Binding FilterByDirectNeighborsCommand}" 
                        IsEnabled="{Binding SelectedNode, Converter={StaticResource NullToBooleanConverter}}"
                        ToolTip="前後のノードのみ表示" 
                        Content="前後表示" Padding="10,2"/>
                <Button Command="{Binding ResetFilterCommand}" 
                        IsEnabled="{Binding IsFiltered}"
                        ToolTip="すべてのノードを表示" 
                        Content="全表示" Padding="10,2"/>
            </ToolBar>
            
            <!-- ツールバー2行目: 表示オプション -->
            <ToolBar>
                <Label Content="表示:" VerticalAlignment="Center" FontWeight="Bold"/>
                <CheckBox IsChecked="{Binding ShowNodeId}" 
                          VerticalAlignment="Center" 
                          Margin="5,0"
                          ToolTip="各ノードのIDを表示"
                          Content="ID"/>
                <CheckBox IsChecked="{Binding ShowBlockNumber}" 
                          VerticalAlignment="Center" 
                          Margin="5,0"
                          ToolTip="各ノードのブロック番号を表示"
                          Content="ブロック番号"/>
                <Separator/>
                <CheckBox IsChecked="{Binding HighlightStartSensor}" 
                          VerticalAlignment="Center" 
                          Margin="5,0"
                          ToolTip="開始センサーが設定されているノードを強調"
                          Content="開始センサー強調"/>
                <CheckBox IsChecked="{Binding HighlightStartSensorWithoutTimer}" 
                          VerticalAlignment="Center" 
                          Margin="5,0"
                          ToolTip="タイマーが未設定のノードを強調"
                          Content="タイマー未設定強調"/>
                <Separator/>
                <CheckBox IsChecked="{Binding ShowAllConnections}" 
                          VerticalAlignment="Center" 
                          Margin="5,0"
                          ToolTip="他サイクルへの接続も含めて表示"
                          Content="全接続表示" FontWeight="Bold"/>
                <Separator/>
                <Label Content="ズーム:" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding ZoomScale, StringFormat='{}{0:P0}'}" 
                          VerticalAlignment="Center" 
                          Width="50"
                          FontWeight="Bold"/>
                <Button Content="リセット" Command="{Binding ResetZoomCommand}" 
                        ToolTip="ズームをリセット (100%)" 
                        Padding="5,2" Margin="2,0"/>
                <Separator/>
                <TextBlock VerticalAlignment="Center" Margin="10,0" Foreground="DarkGray" FontSize="11">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Text" Value="操作: Ctrl+クリックで接続、Ctrl+Shift+クリックで終了条件接続"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsFiltered}" Value="True">
                                    <Setter Property="Text" Value="{Binding FilterNode.DisplayName, StringFormat='フィルター中: {0}'}"/>
                                    <Setter Property="Foreground" Value="Orange"/>
                                    <Setter Property="FontWeight" Value="Bold"/>
                                    <Setter Property="FontSize" Value="12"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </ToolBar>
        </StackPanel>
        
        <!-- メインキャンバス -->
        <ScrollViewer x:Name="ProcessFlowScrollViewer" 
                      HorizontalScrollBarVisibility="Auto" 
                      VerticalScrollBarVisibility="Auto"
                      CanContentScroll="True">
            <Grid MinWidth="{Binding CanvasWidth}" MinHeight="{Binding CanvasHeight}">
                <Canvas x:Name="MainCanvas" 
                        Width="{Binding CanvasWidth}" 
                        Height="{Binding CanvasHeight}"
                        ClipToBounds="False">
                    <Canvas.LayoutTransform>
                        <ScaleTransform ScaleX="{Binding ZoomScale}" ScaleY="{Binding ZoomScale}"/>
                    </Canvas.LayoutTransform>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding CanvasMouseDownCommand}" 
                                                   PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseMove">
                            <i:InvokeCommandAction Command="{Binding CanvasMouseMoveCommand}" 
                                                   PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseUp">
                            <i:InvokeCommandAction Command="{Binding CanvasMouseUpCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    
                    <!-- グリッド線 -->
                    <Canvas.Background>
                        <DrawingBrush TileMode="Tile" Viewport="0,0,40,40" ViewportUnits="Absolute">
                            <DrawingBrush.Drawing>
                                <GeometryDrawing>
                                    <GeometryDrawing.Geometry>
                                        <RectangleGeometry Rect="0,0,40,40"/>
                                    </GeometryDrawing.Geometry>
                                    <GeometryDrawing.Pen>
                                        <Pen Brush="#E0E0E0" Thickness="1"/>
                                    </GeometryDrawing.Pen>
                                </GeometryDrawing>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>
                    </Canvas.Background>
                    
                    
                    <!-- 選択矩形 -->
                    <Rectangle 
                        Visibility="{Binding IsRectangleSelecting, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Stroke="Blue"
                        StrokeThickness="1"
                        StrokeDashArray="2,2"
                        Fill="LightBlue"
                        Opacity="0.3"
                        Canvas.Left="{Binding SelectionRectangle.X}"
                        Canvas.Top="{Binding SelectionRectangle.Y}"
                        Width="{Binding SelectionRectangle.Width}"
                        Height="{Binding SelectionRectangle.Height}"/>
                    
                    <!-- コネクション -->
                    <ItemsControl ItemsSource="{Binding Connections}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Canvas>
                                    <!-- クリック判定用の透明な太い線 -->
                                    <Path StrokeThickness="12" Stroke="Transparent" Fill="Transparent" Cursor="Hand">
                                        <Path.Data>
                                            <PathGeometry>
                                                <PathFigure StartPoint="{Binding StartPoint}">
                                                    <LineSegment Point="{Binding EndPoint}"/>
                                                </PathFigure>
                                            </PathGeometry>
                                        </Path.Data>
                                        <Path.InputBindings>
                                            <MouseBinding MouseAction="LeftClick" 
                                                          Command="{Binding DataContext.SelectConnectionCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                          CommandParameter="{Binding}"/>
                                        </Path.InputBindings>
                                        <Path.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Header="接続線を削除" 
                                                          Command="{Binding DataContext.DeleteConnectionCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                          CommandParameter="{Binding}">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="✖" Foreground="Red" FontWeight="Bold"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                        </Path.ContextMenu>
                                    </Path>
                                    
                                    <!-- 見た目の接続線 -->
                                    <Path StrokeThickness="2" Fill="Transparent" IsHitTestVisible="False">
                                        <Path.Style>
                                            <Style TargetType="Path">
                                                <Setter Property="Stroke" Value="DarkBlue"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ConnectionType}" Value="ProcessToDetail">
                                                        <Setter Property="Stroke" Value="Green"/>
                                                        <Setter Property="StrokeThickness" Value="2.5"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsOtherCycleConnection}" Value="True">
                                                        <Setter Property="Stroke" Value="LightBlue"/>
                                                        <Setter Property="StrokeDashArray" Value="5,3"/>
                                                        <Setter Property="StrokeThickness" Value="3"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsFinishConnection}" Value="True">
                                                        <Setter Property="Stroke" Value="Orange"/>
                                                        <Setter Property="StrokeDashArray" Value="5,3"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                        <Setter Property="Stroke" Value="Red"/>
                                                        <Setter Property="StrokeThickness" Value="3"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsModified}" Value="True">
                                                        <Setter Property="Stroke" Value="Orange"/>
                                                    </DataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsSelected}" Value="True"/>
                                                            <Condition Binding="{Binding IsModified}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Stroke" Value="OrangeRed"/>
                                                        <Setter Property="StrokeThickness" Value="3"/>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsOtherCycleConnection}" Value="True"/>
                                                            <Condition Binding="{Binding IsFinishConnection}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Stroke" Value="LightSeaGreen"/>
                                                        <Setter Property="StrokeDashArray" Value="8,2"/>
                                                        <Setter Property="StrokeThickness" Value="3"/>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Path.Style>
                                        <Path.Data>
                                            <PathGeometry>
                                                <PathFigure StartPoint="{Binding StartPoint}">
                                                    <LineSegment Point="{Binding EndPoint}"/>
                                                </PathFigure>
                                            </PathGeometry>
                                        </Path.Data>
                                    </Path>
                                    
                                    <!-- StartSensorテキスト -->
                                    <Border Canvas.Left="{Binding MidPoint.X, Converter={StaticResource SubtractConverter}, ConverterParameter=30}"
                                            Canvas.Top="{Binding MidPoint.Y, Converter={StaticResource SubtractConverter}, ConverterParameter=10}"
                                            Background="White"
                                            BorderBrush="Gray"
                                            BorderThickness="1"
                                            CornerRadius="3"
                                            Padding="4,2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding StartSensor}" Value="">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsFinishConnection}" Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                        <TextBlock Text="{Binding StartSensor}" 
                                                   FontSize="10" 
                                                   Foreground="Black"/>
                                    </Border>
                                    
                                    <!-- 矢印の頭 -->
                                    <Polygon Points="0,0 10,5 0,10">
                                        <Polygon.Style>
                                            <Style TargetType="Polygon">
                                                <Setter Property="Fill" Value="DarkBlue"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsFinishConnection}" Value="True">
                                                        <Setter Property="Fill" Value="Green"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                        <Setter Property="Fill" Value="Red"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsModified}" Value="True">
                                                        <Setter Property="Fill" Value="Orange"/>
                                                    </DataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsSelected}" Value="True"/>
                                                            <Condition Binding="{Binding IsModified}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Fill" Value="OrangeRed"/>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Polygon.Style>
                                        <Polygon.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform Angle="{Binding ArrowAngle}" CenterX="5" CenterY="5"/>
                                                <TranslateTransform X="{Binding ArrowX}" Y="{Binding ArrowY}"/>
                                            </TransformGroup>
                                        </Polygon.RenderTransform>
                                    </Polygon>
                                </Canvas>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    
                    <!-- 接続中の線 -->
                    <Line x:Name="ConnectionLine" 
                          Stroke="Orange" 
                          StrokeThickness="2" 
                          StrokeDashArray="5,5"
                          Visibility="{Binding IsConnecting, Converter={StaticResource BooleanToVisibilityConverter}}"
                          X1="{Binding ConnectionStartPoint.X}"
                          Y1="{Binding ConnectionStartPoint.Y}"
                          X2="{Binding MousePosition.X, FallbackValue=0}"
                          Y2="{Binding MousePosition.Y, FallbackValue=0}"
                          IsHitTestVisible="False"/>
                    
                    <!-- ノード -->
                    <ItemsControl ItemsSource="{Binding Nodes}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="Canvas.Left" Value="{Binding Position.X}"/>
                                <Setter Property="Canvas.Top" Value="{Binding Position.Y}"/>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border Width="{Binding NodeWidth}" 
                                        CornerRadius="5"
                                        Opacity="{Binding Opacity}">
                                    <Border.Height>
                                        <MultiBinding>
                                            <MultiBinding.Converter>
                                                <local:NodeHeightConverter/>
                                            </MultiBinding.Converter>
                                            <Binding Path="DataContext.ShowNodeId" RelativeSource="{RelativeSource AncestorType=Window}"/>
                                            <Binding Path="DataContext.ShowBlockNumber" RelativeSource="{RelativeSource AncestorType=Window}"/>
                                        </MultiBinding>
                                    </Border.Height>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDown">
                                            <i:InvokeCommandAction Command="{Binding DataContext.NodeMouseDownCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                   CommandParameter="{Binding}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseUp">
                                            <i:InvokeCommandAction Command="{Binding DataContext.NodeMouseUpCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                   CommandParameter="{Binding}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding DataContext.EditSelectedNodeCommand, RelativeSource={RelativeSource AncestorType=Window}}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="Background" Value="{Binding CategoryId, Converter={StaticResource CategoryToColorConverter}}"/>
                                            <Setter Property="BorderBrush" Value="DarkBlue"/>
                                            <Setter Property="BorderThickness" Value="2"/>
                                            <Style.Triggers>
                                                <!-- Processノードの場合の色設定 -->
                                                <DataTrigger Binding="{Binding NodeType}" Value="Process">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Color="#FFE6F3FF" Offset="0"/>
                                                                <GradientStop Color="#FFCCE5FF" Offset="1"/>
                                                            </LinearGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="BorderBrush" Value="#4A90E2"/>
                                                    <Setter Property="BorderThickness" Value="3"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsOtherCycleNode}" Value="True">
                                                    <Setter Property="Background" Value="LightCyan"/>
                                                    <Setter Property="BorderBrush" Value="LightBlue"/>
                                                    <Setter Property="BorderThickness" Value="3"/>
                                                    <Setter Property="Opacity" Value="0.8"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                    <Setter Property="Background" Value="LightYellow"/>
                                                    <Setter Property="BorderBrush" Value="Orange"/>
                                                    <Setter Property="BorderThickness" Value="3"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsSelected}" Value="True"/>
                                                        <Condition Binding="{Binding IsDragging}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="LightBlue"/>
                                                    <Setter Property="BorderBrush" Value="Blue"/>
                                                    <Setter Property="BorderThickness" Value="3"/>
                                                </MultiDataTrigger>
                                                <!-- 開始センサー有りの強調表示 -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding HasStartSensor}" Value="True"/>
                                                        <Condition Binding="{Binding DataContext.HighlightStartSensor, RelativeSource={RelativeSource AncestorType=Window}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="BorderBrush" Value="Green"/>
                                                    <Setter Property="BorderThickness" Value="3"/>
                                                </MultiDataTrigger>
                                                <!-- タイマー未設定の強調表示 -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding HasStartSensorWithoutTimer}" Value="True"/>
                                                        <Condition Binding="{Binding DataContext.HighlightStartSensorWithoutTimer, RelativeSource={RelativeSource AncestorType=Window}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="BorderBrush" Value="Red"/>
                                                    <Setter Property="BorderThickness" Value="4"/>
                                                    <Setter Property="Background" Value="LightPink"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        
                                        <!-- ID表示（左上） -->
                                        <TextBlock Grid.Row="0" 
                                                   Text="{Binding ProcessDetail.Id, StringFormat='ID: {0}'}" 
                                                   HorizontalAlignment="Left" 
                                                   VerticalAlignment="Top"
                                                   FontWeight="Bold"
                                                   FontSize="10"
                                                   Foreground="Gray"
                                                   Margin="2,1,0,0">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding DataContext.ShowNodeId, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        
                                        <!-- ブロック番号表示（右上） -->
                                        <TextBlock Grid.Row="0" 
                                                   Text="{Binding ProcessDetail.BlockNumber, StringFormat='B: {0}'}" 
                                                   HorizontalAlignment="Right" 
                                                   VerticalAlignment="Top"
                                                   FontWeight="Bold"
                                                   FontSize="10"
                                                   Foreground="Purple"
                                                   Margin="0,1,2,0">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding DataContext.ShowBlockNumber, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding ProcessDetail.BlockNumber}" Value="{x:Null}">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        
                                        <TextBlock Grid.Row="1" 
                                                   Text="{Binding CategoryName}" 
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Top"
                                                   FontWeight="Bold"
                                                   FontSize="8"
                                                   Foreground="DarkBlue"
                                                   Margin="2"
                                                   TextTrimming="CharacterEllipsis"/>
                                        <!-- 複合工程名表示 -->
                                        <Border Grid.Row="2" 
                                                Background="Yellow"
                                                CornerRadius="3"
                                                Margin="2,0,2,0"
                                                Padding="4,1">
                                            <Border.Style>
                                                <Style TargetType="Border">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding CompositeProcessName}" Value="{x:Null}">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            <TextBlock Text="{Binding CompositeProcessName}" 
                                                       HorizontalAlignment="Center"
                                                       FontSize="8"
                                                       FontWeight="Bold"
                                                       Foreground="Black"
                                                       TextTrimming="CharacterEllipsis"/>
                                        </Border>
                                        <TextBlock Grid.Row="3" 
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center"
                                                   FontWeight="Bold"
                                                   FontSize="10"
                                                   TextTrimming="CharacterEllipsis">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="Text" Value="{Binding DisplayName}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsOtherCycleNode}" Value="True">
                                                            <Setter Property="Text" Value="{Binding DisplayName, StringFormat='[他サイクル] {0}'}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <TextBlock Grid.Row="4" 
                                                   Text="{Binding StartSensor}" 
                                                   HorizontalAlignment="Center"
                                                   FontSize="8"
                                                   Foreground="Gray"
                                                   TextTrimming="CharacterEllipsis"/>
                                    </Grid>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Canvas>
            </Grid>
        </ScrollViewer>
        
        <!-- ノード選択時の接続線リスト表示 -->
        <Popup IsOpen="{Binding IsNodeSelected}" 
               PlacementTarget="{Binding ElementName=ProcessFlowScrollViewer}"
               Placement="Right"
               StaysOpen="True"
               AllowsTransparency="True">
            <Border Background="White" 
                    BorderBrush="Gray" 
                    BorderThickness="1"
                    CornerRadius="5"
                    Margin="10">
                <StackPanel Margin="15" MinWidth="400" MaxWidth="500">
                    <TextBlock Text="{Binding SelectedNodeDisplayName, StringFormat='ノード: {0}'}" 
                               FontWeight="Bold" 
                               FontSize="16"
                               Margin="0,0,0,15"/>
                    
                    <!-- 接続元（このノードへの接続） -->
                    <TextBlock Text="接続元:" FontWeight="Bold" FontSize="14" Margin="0,5,0,5"/>
                    <ItemsControl ItemsSource="{Binding IncomingConnections}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="8,5" Margin="0,2">
                                    <StackPanel>
                                        <TextBlock>
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="Text" Value="{Binding FromNode.DisplayName}"/>
                                                    <Setter Property="FontSize" Value="12"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsOtherCycleConnection}" Value="True">
                                                            <Setter Property="Foreground" Value="DodgerBlue"/>
                                                            <Setter Property="FontWeight" Value="Bold"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding IsFinishConnection}" Value="True">
                                                            <Setter Property="Foreground" Value="Green"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <TextBlock Text="{Binding FromNode.ProcessDetail.CycleId, StringFormat='(サイクル: {0})'}" 
                                                   FontSize="11" 
                                                   Foreground="Gray"
                                                   Visibility="{Binding IsOtherCycleConnection, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    
                    <!-- 接続先（このノードからの接続） -->
                    <TextBlock Text="接続先:" FontWeight="Bold" FontSize="14" Margin="0,15,0,5"/>
                    <ItemsControl ItemsSource="{Binding OutgoingConnections}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="8,5" Margin="0,2">
                                    <StackPanel>
                                        <TextBlock>
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="Text" Value="{Binding ToNode.DisplayName}"/>
                                                    <Setter Property="FontSize" Value="12"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsOtherCycleConnection}" Value="True">
                                                            <Setter Property="Foreground" Value="DodgerBlue"/>
                                                            <Setter Property="FontWeight" Value="Bold"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <TextBlock Text="{Binding ToNode.ProcessDetail.CycleId, StringFormat='(サイクル: {0})'}" 
                                                   FontSize="11" 
                                                   Foreground="Gray"
                                                   Visibility="{Binding IsOtherCycleConnection, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    
                    <!-- 警告メッセージ -->
                    <TextBlock Text="他サイクルへの接続が含まれています" 
                               Foreground="Red"
                               FontWeight="Bold"
                               FontSize="13"
                               Margin="0,15,0,0"
                               Visibility="{Binding HasOtherCycleConnections, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                </StackPanel>
            </Border>
        </Popup>
    </DockPanel>
</Window>